# Copyright 2023 The Cockroach Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

# Binaries will build Replicator for a variety of common platforms and
# optionally push the results to a GCP bucket.
name: Golang Binaries
permissions:
  contents: write # Needed to modify release.
  id-token: write
  statuses: write
on:
  workflow_call:
  workflow_dispatch:

jobs:
  binaries:
    name: Binaries
    runs-on: ${{ matrix.runner || 'ubuntu-latest' }}
    outputs:
      output_linux_amd64: ${{ steps.link.outputs.output_linux_amd64_ }}
      output_linux_amd64_oracle: ${{ steps.link.outputs.output_linux_amd64_oracle }}
      output_linux_arm64: ${{ steps.link.outputs.output_linux_arm64_ }}
      output_darwin_amd64: ${{ steps.link.outputs.output_darwin_amd64_ }}
      output_darwin_arm64: ${{ steps.link.outputs.output_darwin_arm64_}}
      output_windows_amd64: ${{ steps.link.outputs.output_windows_amd64_ }}
      output_windows_arm64: ${{ steps.link.outputs.output_windows_arm64_ }}
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: amd64
            cgo: 1
            runner: ubuntu-20.04 # Roll glibc dependency back
            target: oracle
          - os: linux
            arch: arm64
          - os: darwin
            arch: arm64
          - os: darwin
            arch: amd64
          - os: windows
            arch: amd64
            ext: .exe
          - os: windows
            arch: arm64
            ext: .exe

    steps:
      - uses: actions/checkout@v4

      - id: setup_go
        name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Extract the ref or tag from the GITHUB_REF
        id: extract
        run: | 
            echo "Ref: ${GITHUB_REF_NAME#v}"
            echo "tag=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT

      - name: Make version constant changes so it matches release version
        if: ${{ github.event_name == 'release' }}
        run: |
          ./scripts/ci/replace-api-version.sh "${{steps.extract.outputs.tag}}"

      - id: package
        env:
          PACKAGE_NAME: "replicator"
          PACKAGE_FULL_TARGET: "${{ matrix.os }}-${{ matrix.arch }}${{ matrix.target && format('-{0}', matrix.target) || '' }}"
          PACKAGE_BIN_NAME: "replicator${{ matrix.ext }}" # replicator.exe
          PACKAGE_BUILD_FLAGS: ${{ matrix.target && format('-tags target_{0}', matrix.target) || '' }}
          PACKAGE_CGO_ENABLED: ${{ matrix.cgo || '0' }}
          PACKAGE_GOOS: ${{ matrix.os }}
          PACKAGE_GOARCH: ${{ matrix.arch }}
          UPLOAD_DIR: upload
        run: ./.github/workflows/package.sh

      - id: release-artifacts
        name: Attach binaries to GitHub Release
        if: ${{ github.event.release.tag_name }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release upload ${{ github.event.release.tag_name }} upload/replicator*-${{ github.event.release.tag_name }}*

      - id: auth
        name: Authenticate to GCP
        # Only authenticate if we're on the main repo (i.e. have access
        # to the secret).
        if: "${{ vars.GCP_SERVICE_ACCOUNT }}"
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: "${{ vars.WORKLOAD_IDENTITY_PROVIDER }}"
          service_account: "${{ vars.GCP_SERVICE_ACCOUNT }}"

      - id: upload
        uses: google-github-actions/upload-cloud-storage@v2
        if: "${{ steps.auth.outputs.auth_token }}"
        with:
          path: "upload/"
          parent: false # Don't include the upload directory name
          destination: ${{ vars.REPLICATOR_BUCKET }}/
          process_gcloudignore: false # Suppress warning about missing .gcloudignore file

      - id: link
        name: Summary link
        if: "${{ steps.upload.outputs.uploaded }}"
        env:
          UPLOAD_PATHS: ${{ steps.upload.outputs.uploaded }}
        run: |
          os="${{ matrix.os }}"
          arch="${{ matrix.arch }}"
          target="${{ matrix.target }}"

          for f in ${UPLOAD_PATHS//,/ }; do # Split comma-separated list
            echo "[$(basename $f)](https://replicator.cockroachdb.com/$f)" >> "$GITHUB_STEP_SUMMARY"
            TAG_REGEX="[0-9]+\.[0-9]+\.[0-9]+"
            if [[ "$f" =~ $TAG_REGEX ]]; then
              echo "output_${os}_${arch}_${target}=https://replicator.cockroachdb.com/$f" >> "$GITHUB_OUTPUT"
            else
              echo "skipping non-release version"
            fi
          done
        shell: bash

  # Aggregate the results of multiple jobs within this workflow into a
  # single status object that we can use for branch protection.
  #
  # https://docs.github.com/en/rest/commits/statuses
  status:
    name: Create status objects
    runs-on: ubuntu-latest
    needs: # Update failure case below
      - binaries
    if: ${{ always() }}
    env:
      CONTEXT: Workflow Binaries
      GH_TOKEN: ${{ github.token }}
      MERGE_SHA: ${{ github.event.merge_group.head_sha }}
      PR_SHA: ${{ github.event.pull_request.head.sha }}
      STATE: success
      RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: Failure
        if: ${{ needs.binaries.result != 'success' }}
        run: echo "STATE=failure" >> $GITHUB_ENV
      - name: Report
        run: |
          set -eo pipefail

          if [ ! -z "$PR_SHA" ]; then
            gh api \
               repos/${{ github.repository }}/statuses/$PR_SHA \
               -f "state=$STATE" \
               -f "context=$CONTEXT" \
               -f "target_url=$RUN_URL"
          fi

          if [ ! -z "$MERGE_SHA" ]; then
            gh api \
              repos/${{ github.repository }}/statuses/$MERGE_SHA \
              -f "state=$STATE" \
              -f "context=$CONTEXT" \
              -f "target_url=$RUN_URL"
          fi

  manifest:
    name: Create release manifest
    runs-on: ubuntu-latest
    needs:
      - binaries
    if: ${{ github.event_name == 'release' }}
    env:
      GH_TOKEN: ${{ github.token }}
      STATE: success
    steps:
      - name: Failure
        if: ${{ needs.binaries.result != 'success' }}
        run: echo "STATE=failure" >> $GITHUB_ENV

      - uses: actions/checkout@v4

      - name: Pull the previous versions text file from GCP
        run: |
          curl --fail-with-body -o versions.txt -s 'https://replicator.cockroachdb.com/versions.txt' || cp ./climanifest/base-versions.txt versions.txt
      # Copying the versions.txt file to the `artifacts` directory
      # will result in it being synced to the GCS bucket.
      - name: Write the versions text file with updated binary links
        run: |
          mkdir -p ./artifacts
          echo "" >> ./versions.txt
          
          echo '${{ toJSON(needs.binaries.outputs) }}' > outputs.json
          for key in $(jq -r 'keys[]' outputs.json); do
            link=$(jq -r --arg k "$key" '.[$k]' outputs.json)
            # Remove "edge/sha" from the link since we just want it
            # relative to the bucket for release versions.
            link=$(echo "$link" | sed 's|/edge/sha||')
            echo "$link" >> ./versions.txt
          done

          cp versions.txt ./artifacts/versions.txt
          cat ./artifacts/versions.txt
        shell: bash

      - name: Download climanifest binary
        run: |
          curl --fail-with-body -o ./climanifest-ci -s 'https://molt.cockroachdb.com/utils/release/climanifest-linux-amd64'
          chmod +x ./climanifest-ci

      - name: Generate the manifest
        run: |
          ./climanifest-ci --version-file ./artifacts/versions.txt --output-file ./artifacts/versions.html --template-file "./climanifest/climanifestHtml.tmpl" --title "Replicator CLI Versions"
          cat ./artifacts/versions.html
      
      - id: auth
        name: Authenticate to GCP
        # Only authenticate if we're on the main repo (i.e. have access
        # to the secret).
        if: "${{ vars.GCP_SERVICE_ACCOUNT }}"
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: "${{ vars.WORKLOAD_IDENTITY_PROVIDER }}"
          service_account: "${{ vars.GCP_SERVICE_ACCOUNT }}"

      - name: Upload manifest
        id: upload
        uses: google-github-actions/upload-cloud-storage@v2
        if: "${{ steps.auth.outputs.auth_token }}"
        with:
          path: "artifacts"
          parent: false # Don't include the upload directory name
          destination: ${{ vars.REPLICATOR_BUCKET }}/
          process_gcloudignore: false # Suppress warning about missing .gcloudignore file
  
  # This job creates a pull request to bump the version constant in the
  # Replicator build (binary and docker image).
  create-pull-request:
    if: ${{ github.event_name == 'release' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Extract the ref or tag from the GITHUB_REF
        id: extract
        run: |
          echo "Ref: ${GITHUB_REF_NAME#v}"
          echo "tag=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
      - name: Make version constant changes so it matches release version
        run: |
          ./scripts/ci/replace-api-version.sh "${{steps.extract.outputs.tag}}"
      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.TOKEN_FOR_PRS }}
          commit-message: 'apiversion: bump version to ${{steps.extract.outputs.tag}}'
          committer: GitHub <noreply@github.com>
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          signoff: false
          base: master
          branch: 'bump-to-${{steps.extract.outputs.tag}}'
          delete-branch: true
          title: 'apiversion: bump version to ${{steps.extract.outputs.tag}}'
          body: |
            Bump to ${{steps.extract.outputs.tag}}
            [1]: https://github.com/peter-evans/create-pull-request
          labels: |
            release
            automated pr
          assignees: ryanluu12345, ZhouXing19, Jeremyyang920, noelcrl
          reviewers: ryanluu12345, ZhouXing19, Jeremyyang920, noelcrl
          draft: false
      

